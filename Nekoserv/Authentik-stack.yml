version: '3.8'
networks:
  authentik:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/24


services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN 
      - FOWNER 
      - DAC_OVERRIDE 
      - SETUID
      - SETGID
    volumes:
      - database:/var/lib/postgresql/data
    networks:
      authentik:
        ipv4_address: 172.23.0.2
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - stack.env
    labels: 
      - wud.watch=false
  authentik_ldap:
      image: ghcr.io/goauthentik/ldap:2025.4
      restart: unless-stopped
      user: "1001:1001"
      ports:
        - 390:3389
      #  - 636:6636
      networks:
        authentik:
          ipv4_address: 172.23.0.3
      environment:
          AUTHENTIK_HOST: https://sso.nekocorp.fr
          AUTHENTIK_INSECURE: "false"
          AUTHENTIK_TOKEN: ${AUTHENTIK_TOKEN_LDAP}
      depends_on:
        server:
          condition: service_healthy
        worker:
          condition: service_healthy
  authentik_ldap_radius:
      image: ghcr.io/goauthentik/ldap:2025.4
      restart: unless-stopped
      user: "1001:1001"
      ports:
        - 389:3389
      #  - 636:6636
      networks:
        authentik:
          ipv4_address: 172.23.0.7
      environment:
          AUTHENTIK_HOST: https://sso.nekocorp.fr
          AUTHENTIK_INSECURE: "false"
          AUTHENTIK_TOKEN: ${AUTHENTIK_TOKEN_LDAP_RADIUS}
      depends_on:
        server:
          condition: service_healthy
        worker:
          condition: service_healthy
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    networks:
      authentik:
         ipv4_address: 172.23.0.4
    volumes:
      - redis:/data
    labels: 
      - wud.watch=false
  server:
    image: ghcr.io/goauthentik/server:2025.4
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    networks:
       authentik:
         ipv4_address: 172.23.0.5 
    env_file:
      - stack.env
    user: "0:0"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN 
      - FOWNER 
      - DAC_OVERRIDE 
      - SETUID
      - SETGID
    ports:
      - "127.0.0.1:${COMPOSE_PORT_HTTP:-9000}:9000"
      - "127.0.0.1:${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
  worker:
    image: ghcr.io/goauthentik/server:2025.4
    restart: unless-stopped
    command: worker
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN 
      - FOWNER 
      - DAC_OVERRIDE 
      - SETUID
      - SETGID
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    user: "0:0"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    networks:
       authentik:
         ipv4_address: 172.23.0.6
    env_file:
      - stack.env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
        

volumes:
  database:
    driver: local
  redis:
    driver: local
